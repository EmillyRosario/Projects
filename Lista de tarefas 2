import React, { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { motion } from "framer-motion";
import { Trash2, CheckCircle2 } from "lucide-react";

export default function TodoApp() {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");

  const addTask = () => {
    if (newTask.trim()) {
      setTasks([...tasks, { text: newTask.trim(), completed: false }]);
      setNewTask("");
    }
  };

  const toggleTask = (index) => {
    const updated = [...tasks];
    updated[index].completed = !updated[index].completed;
    setTasks(updated);
  };

  const deleteTask = (index) => {
    const updated = tasks.filter((_, i) => i !== index);
    setTasks(updated);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 p-6">
      <h1 className="text-4xl font-bold text-center mb-8 text-emerald-700">
        âœ… Lista de Tarefas
      </h1>

      <div className="max-w-xl mx-auto mb-6 flex gap-2">
        <Input
          placeholder="Adicionar nova tarefa..."
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
        />
        <Button onClick={addTask}>Adicionar</Button>
      </div>

      <div className="max-w-xl mx-auto space-y-4">
        {tasks.length === 0 && (
          <p className="text-center text-gray-500">Nenhuma tarefa adicionada.</p>
        )}
        {tasks.map((task, index) => (
          <motion.div
            key={index}
            whileHover={{ scale: 1.01 }}
            className="cursor-pointer"
          >
            <Card
              className={`rounded-xl p-4 flex items-center justify-between shadow-md transition-all ${
                task.completed ? "bg-emerald-200" : "bg-white"
              }`}
            >
              <CardContent className="p-0 w-full flex items-center justify-between">
                <span
                  className={`text-md ${
                    task.completed ? "line-through text-gray-500" : "text-gray-800"
                  }`}
                  onClick={() => toggleTask(index)}
                >
                  {task.text}
                </span>
                <div className="flex gap-2">
                  <CheckCircle2
                    onClick={() => toggleTask(index)}
                    className={`w-5 h-5 cursor-pointer ${
                      task.completed ? "text-green-600" : "text-gray-400"
                    }`}
                  />
                  <Trash2
                    onClick={() => deleteTask(index)}
                    className="w-5 h-5 text-red-500 cursor-pointer"
                  />
                </div>
              </CardContent>
            </Card>
          </motion.div>
        ))}
      </div>
    </div>
  );
}
